<?php
/**
 * Installation Script
 *
 * This is the installation script responsible for creating the configuration file,
 * creating the new database tables, and setting the info for the new user.
 *
 * It should have checks in it to see if each page has already ran and prevent it from
 * being ran again since it will be present until the user removes the 'install' folder.
 *
 * PHP5
 *
 * @package     Chevereto
 * @author      David Miles <david@amereservant.com>
 * @version     2.0
 * @since       2.0
 * @license     http://creativecommons.org/licenses/MIT/ MIT License
 */
session_start();

// Try to form the site's base URL automatically
$base_url = 'http://'. $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

// Prevent sub-pages from being directly accessed
define('CHEVINSTALL', true);

// Strip any query variables off of the Base URL
preg_match('#([?].*)#', $_SERVER['REQUEST_URI'], $matches);
if( isset($matches[0]) && strlen($matches[0]) > 0 )
{
    $base_url = str_replace($matches[0], '', $base_url);
}

// Define the installation path
$install_path = CHEV_PATH . CHEV_SEP .'install'. CHEV_SEP;

// Create a unique MD5 hash for added form submission security
$submitkey = md5(dirname(__FILE__));

// Determines if the config.php file has already been created
$write_config = true;

/**
 * Process Install Data
 *
 * This is called when the "page2.php" data is submitted to process the data.
 *
 * @param   array   $_POST          The POST data array
 * @param   string  $base_url       The $base_url value set at the beginning of this file
 * @param   bool    $write_config   Pass-by-reference the $write_config to change it's value
 * @return  array                   'status' = (bool) true for success, false on fail
 *                                  'msg' = (string) The message to display showing the results
 * @since   2.0
 */
function process_install_data( $post, $base_url, &$write_config )
{
    // Check for the PDO Extension
    if( !extension_loaded('PDO') )
    {
        return array( 'status' => false, 'msg' => 'PDO extension MUST be enabled!' );
    }
    
    // Check Username and Password fields are not empty
    if( empty($post['username']) || empty($post['password']) )
    {
        return array( 'status' => false, 'msg' => 'Username AND Password cannot be empty!' );
    }
    
    // Compare passwords for match
    if( $post['password'] !== $post['confirm-password'] )
    {
        return array( 'status' => false, 'msg' => 'Passwords do not match!' );
    }
    $password = sha1($post['password']);
    
    // Check that ONLY one database type is defined
    if( !empty($post['mysql-user']) && !empty($post['mysql-password']) && 
        !empty($post['sqlite']) )
    {
        return array( 'status' => false, 'msg' => 'Please only specify ONE database type!' );
    }
    
    // Check that at LEAST one database type is defined
    if( (empty($post['mysql-user']) || empty($post['mysql-password'])) && empty($post['sqlite']) )
    {
        return array( 'status' => false, 'msg' => 'You must specify at least ONE database type!' );
    }
    
    $pdo_drivers = PDO::getAvailableDrivers();
    // Verify the MySQL PDO driver exists
    if( !empty($post['mysql-user']) && !empty($post['mysql-password']) )
    {
        if( !in_array('mysql', $pdo_drivers) )
        {
            return array( 'status' => false, 'msg' => 'The MySQL PDO driver isn\'t available!' );
        }
        $dbtype = 'mysql';
    }
    // Verify the SQLite PDO driver exists
    if( !empty($post['sqlite']) )
    {
        if( !in_array('sqlite', $pdo_drivers) )
        {
            return array( 'status' => false, 'msg' => 'The SQLite PDO driver isn\'t available!' );
        }
        $dbtype = 'sqlite';
    }
    // Store the new user info in the SESSION data so it can be used on page3.php
    $_SESSION['newuser']['username'] = $post['username'];
    $_SESSION['newuser']['password'] = encrypt_password( $post['password'] );
    $_SESSION['newuser']['email']    = $post['email'];

// The config.php file's contents    
    $config_contents = <<<______EOD
<?php
/**
 * Configuration File
 *
 * This file is automatically generated by the install script and contains
 * some of the basic settings for Chevereto.
 *
 * @package     Chevereto
 * @author      David Miles <david@amereservant.com>
 * @version     2.0
 * @since       2.0
 * @license     http://creativecommons.org/licenses/MIT/ MIT License
 */

// Language
define('LANG', 'en');

// Website's URL
define('SITE_URL', '{$post['site-url']}');

// Debugging
define('DEBUG', false); // Set to true to show error/debugging messages

// MySQL Settings
define('DB_USER', '{$post['mysql-user']}'); // Database User (Only if using MySQL!)
define('DB_PASS', '{$post['mysql-password']}'); // Database Password (Only if using MySQL!)
define('DB_HOST', '{$post['mysql-host']}'); // Database Hostname (Only if using MySQL!)
define('DB_NAME', '{$post['mysql-dbname']}'); // Database Name (Only if using MySQL!)

// SQLite Settings
define('SQLITE_FILE', '{$post['sqlite']}'); // SQLite Filename (WITHOUT extension)


/** END OF CONFIG **/
______EOD;
    
    // Try to create the config.php file
    $write_config = @file_put_contents( CHEV_PATH . CHEV_SEP .'config.php', $config_contents );
    
    // Since the user can download the file if it's not writable, we still return
    // true since it's not an error and return the config file's contents so it can
    // be displayed and used for the download script.
    return array( 'status' => true, 'config' => $config_contents );    
}

/**
 * Create The Database Tables
 *
 * Checks that the tables don't already exist and creates them if not.
 * It also will add the new user info from the SESSION data if the tables were
 * successfully created.
 *
 * @param   void
 * @return  array                   'status' = (bool) true for success, false on fail
 *                                  'msg' = (string) The message to display showing the results
 * @since   2.0
 */
function create_db_tables()
{
   /**
    * The parent picture table
    *
    * This serves more as a "parent" table with the image's details, but the file's
    * info such as sizes and full filenames are stored in the 'sizes' table.
    */
    $sql = "CREATE TABLE pics ( " .
        "id INTEGER PRIMARY KEY NOT NULL, " .
        "uid INTEGER NOT NULL DEFAULT '0', " .  // The logged-in user's ID (0 if user isn't logged in)
        "created_on INTEGER NOT NULL, " .       // Unix Timestamp
        "pictype VARCHAR(4) NOT NULL, " .       // Image Extension - (jpg, bmp, png, gif)
        "submit_ip VARCHAR(15) NOT NULL, " .    // Uploader's IP - (for legal reasons)
        "unique_name VARCHAR(32) NOT NULL, " .  // The image's filename (without extension!)
        "md5hash VARCHAR(32) NOT NULL, " .      // MD5 File Hash - (used to check for duplicate uploads)
        "tags VARCHAR(100) DEFAULT NULL )";     // Image tags
    
    /**
    * The picture files table
    *
    * This stores the information about each image and is referenced to the picture
    * data in the 'pics' table via the 'picid' value.
    * This allows better data optimization for pictures with more than one size stored for it.
    */
    $sql2 = "CREATE TABLE sizes ( " .
        "cid INTEGER PRIMARY KEY NOT NULL, " .
        "created_date INTEGER NOT NULL, " .         // Unix Timestamp
        "picid INTEGER NOT NULL, " .                // The original ID from the pics table
        "child_filename VARCHAR(37) NOT NULL, " .   // The image's full filename (with extension)
        "width INTEGER NOT NULL, " .                // Image's Width
        "height INTEGER NOT NULL, " .               // Image's Height
        "is_original INTEGER NOT NULL )";           // Is this the original uploaded image? 0=false, 1=true
        
   /**
    * The users table
    *
    * All of the basic user info is stored here.
    * The passwords consist of 4 fields for extra security, 'password', 'salt1', 
    * 'salt2', and 'pattern'.  See the encrypt_password() function in system/core.php
    * for more information.
    */
    $sql3 = "CREATE TABLE users ( " .
        "id INTEGER PRIMARY KEY NOT NULL, " .
        "created_on INTEGER NOT NULL, " .
        "email VARCHAR(120) NOT NULL, " .
        "username VARCHAR(50) NOT NULL, " .
        "password VARCHAR(40) NOT NULL, " .
        "salt1 VARCHAR(12) NOT NULL, " .
        "salt2 VARCHAR(10) NOT NULL, " .
        "pattern VARCHAR(22) NOT NULL )";
    
   /**
    * The Options/Settings table
    *
    * The concept for this table comes from WordPress's options.
    * This stores all settings for both the system and plugins, so therefore
    * all plugins should have a prefix on their options to avoid naming collisions.
    */
    $sql4 = "CREATE TABLE options ( " .
        "id INTEGER PRIMARY KEY NOT NULL, " .
        "name VARCHAR(20) NOT NULL, " .                 // The option name
        "value VARCHAR(120) NOT NULL, " .               // The option value
        "autoload VARCHAR(3) NOT NULL DEFAULT 'yes' )"; // Should it be autoloaded in the Registry?
        
    // We're only checking for one table since the others shouldn't exist if it doesn't.
    $exists = db_raw_exec('SELECT * FROM pics');
    
    if( $exists === false )
    {
        // Make sure new user SESSION data is present
        if( !isset($_SESSION['newuser']) )
        {
            return array( 'status' => false, 'msg' => 'New user SESSION data is missing!  Cannot proceed!' );
        }
        
        // Create each table
        $c = db_raw_exec($sql); // Create the pic table
        if( $c !== false )
        {
            $d = db_raw_exec($sql2); // Create sizes table
            if( $d !== false )
            {
                $ev = db_raw_exec($sql3); // Create users table
                if( $ev !== false )
                {
                    $f = db_raw_exec($sql4); // Create options table
                }
            }
        }
        
        // Check for any errors
        if( $c === false || $d === false || $ev === false || $f === false )
        {
            return array( 'status' => false, 'msg' => 'Failed To Create Database Table!  ERROR: '. db_get_last_error() );
        }
        // Add new user data to database
        add_new_user( $_SESSION['newuser']['username'], $_SESSION['newuser']['password'], $_SESSION['newuser']['email'] );
    }
    else
    {
        // The table already exists!!
        return array( 'status' => true, 'msg' => 'Database already installed!  Delete the \'install\' directory to proceed.', 'warn' => true );
    }
    // Hmmm, here for a good time perhaps? (probably needs deleting)
    return array('status' => true, 'msg' => 'Database successfully installed!  Delete the \'install\' directory to proceed.', 'warn' => false );
}

// PROCESS SUBMITTED SETTINGS - (page2.php)
if( isset($_POST['submitkey']) && $submitkey === $_POST['submitkey'] )
{
    $result = process_install_data( $_POST, $base_url, $write_config );
}

// Check for PDO extension and get available PDO drivers
$pdo_ext = extension_loaded('PDO');
if( $pdo_ext )
{
    $pdo_drivers = PDO::getAvailableDrivers();
}
else
{
    $pdo_drivers = array();
}
$sqlite = in_array('sqlite', $pdo_drivers);
$mysql  = in_array('mysql', $pdo_drivers);

// Check if paths are writable and if config.php file exists already
$sqlite_path_writeable = is_writable(SYS_PATH . CHEV_SEP . 'database' . CHEV_SEP);
$config_path_writeable = is_writable(CHEV_PATH . CHEV_SEP);
$config_file_exists    = file_exists(CHEV_PATH . CHEV_SEP .'config.php');

///  Compatibility Page Messages  ///
$pass_span = '<span class="result-img"><img src="./images/accepted_16.png" alt="" /></span> 
              <span class="passtext">PASSED!</span>';
$fail_span = '<span class="result-img"><img src="./images/cancel_16.png" alt="" /></span> 
            <span class="failtext">FAILED!</span><img class="failinfo" src="./images/info_16.png" alt="" />';

///  Notice Message printf Formats  ///
$success_format = '<div class="success msg"><span>SUCCESS:</span> %s</div>';
$error_format   = '<div class="error msg"><span>ERROR:</span> %s</div>';
$warning_format = '<div class="warning msg"><span>WARNING:</span> %s</div>';

// Format result message if $result has been set
if( isset($result) )
{
    if( !isset($result['msg']) )
    {
        $res_msg = '';
    }
    else
    {
        $res_msg = ( $result['status'] ? sprintf($success_format, $result['msg']):
                                     sprintf($error_format, $result['msg']) );
    }
    
    if( isset($write_config) && !$write_config )
    {
        $res_msg = sprintf($warning_format, 'Configuration file couldn\'t be created!');
    }
}
else
{
    $res_msg = '';
}
?>
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Chevereto 2.0 - Installation</title>
<link href="./install/estilo.css" rel="stylesheet" type="text/css">
</head>
<body>
<div id="top">
	<div id="logo">
	  <img src="./install/images/logo.png" alt="Chevereto Image Hosting" /> <span id="installation">INSTALLATION - <?php
	    echo !isset( $_GET['install_page'] ) ? 1 : $_GET['install_page']; ?> of 3</span>
    </div>
</div>
<?php if( !isset( $_GET['install_page'] ) ) require_once $install_path .'pages'. CHEV_SEP .'page1.php'; ?>
<?php if( isset( $_GET['install_page'] ) && file_exists( $install_path .'pages'. CHEV_SEP .'page'. $_GET['install_page'] .'.php' ) )
      {
            require_once $install_path .'pages'. CHEV_SEP .'page'. $_GET['install_page'] .'.php';
      }
      elseif( isset( $_GET['install_page'] ) )
      {
            die( 'FATAL ERROR: The page you requested doesn\'t exist!' );
      }
?>
<div id="foot"><div class="foot-d2">Powered by <a href="http://chevereto.com/" target="_blank">Chevereto</a></div></div>

</body>
</html>
